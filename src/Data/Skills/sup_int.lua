-- This file is automatically generated, do not edit!
-- Path of Building
--
-- Intelligence support gems
-- Skill data (c) Grinding Gear Games
--
local skills, mod, flag, skill = ...

skills["SupportAddedChaosDamage"] = {
	name = "SupportAddedChaosDamage",
	hidden = true,
	color = 3,
	baseEffectiveness = 0.43329998850822,
	incrementalEffectiveness = 0.041999999433756,
	support = true,
	requireSkillTypes = { SkillType.Hit, SkillType.Attack, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportAddedChaosDamagePlus"] = {
	name = "SupportAddedChaosDamagePlus",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Hit, SkillType.Attack, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	plusVersionOf = "SupportAddedChaosDamage",
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["supported_active_skill_gem_level_+"] = {
			mod("SupportedGemProperty", "LIST", { keyword = "active_skill", key = "level", value = nil }),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportAddedLightningDamage"] = {
	name = "SupportAddedLightningDamage",
	hidden = true,
	color = 3,
	baseEffectiveness = 0.52499997615814,
	incrementalEffectiveness = 0.039000000804663,
	support = true,
	requireSkillTypes = { SkillType.Attack, SkillType.Hit, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportAddedLightningDamagePlus"] = {
	name = "SupportAddedLightningDamagePlus",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Attack, SkillType.Hit, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	plusVersionOf = "SupportAddedLightningDamage",
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["supported_lightning_skill_gem_level_+"] = {
			mod("SupportedGemProperty", "LIST", { keyword = "active_skill", key = "level", value = nil }, 0, 0, { type = "SkillType", skillType = SkillType.LightningSkill }),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportArcaneSurge"] = {
	name = "SupportArcaneSurge",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Spell, },
	addSkillTypes = { SkillType.Duration, },
	excludeSkillTypes = { SkillType.Trap, SkillType.Mine, SkillType.Totem, SkillType.ManaCostReserved, },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_arcane_surge_mana_regeneration_rate_+%"] = {
			mod("ManaRegen", "INC", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Arcane Surge" }),
		},
		["support_arcane_surge_spell_damage_+%_final"] = {
			mod("Damage", "MORE", nil, ModFlag.Spell, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Arcane Surge" }),
		},
		["support_arcane_surge_spell_damage_+%_final_while_you_have_arcane_surge"] = {
			mod("Damage", "MORE", nil, ModFlag.Spell, 0, { type = "Condition", var = "AffectedByArcaneSurge" }),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportArchmage"] = {
	name = "SupportArchmage",
	hidden = true,
	color = 3,
	baseEffectiveness = 0.17499999701977,
	incrementalEffectiveness = 0.039000000804663,
	support = true,
	requireSkillTypes = { SkillType.Hit, SkillType.Spell, SkillType.AND, },
	addSkillTypes = { },
	excludeSkillTypes = { SkillType.Totem, SkillType.Trap, SkillType.Mine, SkillType.ManaCostReserved, SkillType.Vaal, SkillType.Arcane, },
	ignoreMinionTypes = true,
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["manaweave_cost_equals_%_unreserved_mana"] = {
			skill("baseManaCostIsAtLeastPercentUnreservedMana", nil),
		},
		["manaweave_added_lightning_damage_%_cost_if_payable"] = {
			mod("LightningMin", "BASE", nil, 0, 0, { type = "PerStat", stat = "ManaCost" }),
			mod("LightningMax", "BASE", nil, 0, 0, { type = "PerStat", stat = "ManaCost" }),
			div = 100,
		},
		["manaweave_added_cold_damage_%_cost_if_payable"] = {
			mod("ColdMin", "BASE", nil, 0, 0, { type = "PerStat", stat = "ManaCost" }),
			mod("ColdMax", "BASE", nil, 0, 0, { type = "PerStat", stat = "ManaCost" }),
			div = 100,
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportBlasphemy"] = {
	name = "SupportBlasphemy",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.AppliesCurse, SkillType.Hex, SkillType.AND, },
	addSkillTypes = { SkillType.ManaCostReserved, SkillType.DamageCannotBeReflected, SkillType.Type27, SkillType.Aura, SkillType.AuraDebuff, SkillType.CanHaveBlessing, SkillType.SecondWindSupport, },
	excludeSkillTypes = { SkillType.Trap, SkillType.Mine, SkillType.OR, SkillType.Totem, SkillType.NOT, SkillType.AND, },
	ignoreMinionTypes = true,
	statDescriptionScope = "gem_stat_descriptions",
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportBlasphemyPlus"] = {
	name = "SupportBlasphemyPlus",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.AppliesCurse, SkillType.Hex, SkillType.AND, },
	addSkillTypes = { SkillType.ManaCostReserved, SkillType.DamageCannotBeReflected, SkillType.Aura, SkillType.AuraDebuff, SkillType.CanHaveBlessing, SkillType.SecondWindSupport, },
	excludeSkillTypes = { SkillType.Trap, SkillType.Mine, SkillType.OR, SkillType.Totem, SkillType.NOT, SkillType.AND, },
	ignoreMinionTypes = true,
	plusVersionOf = "SupportBlasphemy",
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["supported_curse_skill_gem_level_+"] = {
			mod("SupportedGemProperty", "LIST", { keyword = "active_skill", key = "level", value = nil }, 0, KeywordFlag.Curse),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportBonechill"] = {
	name = "SupportBonechill",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Attack, SkillType.Hit, SkillType.NonHitChill, SkillType.ChillingArea, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_bonechill_cold_damage_+%_final"] = {
			mod("ColdDamage", "MORE", nil),
		},
	},
	baseMods = {
		skill("supportBonechill", true),
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportCastOnStunned"] = {
	name = "SupportCastOnStunned",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Spell, SkillType.Triggerable, SkillType.AND, },
	addSkillTypes = { SkillType.Triggered, SkillType.SecondWindSupport, },
	excludeSkillTypes = { SkillType.Trap, SkillType.Mine, SkillType.Totem, SkillType.Aura, SkillType.TriggeredGrantedSkill, },
	statDescriptionScope = "gem_stat_descriptions",
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportCastWhileChannelling"] = {
	name = "SupportCastWhileChannelling",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Channelled, },
	addSkillTypes = { },
	excludeSkillTypes = { SkillType.Totem, },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["cast_while_channelling_time_ms"] = {
			skill("triggerTime", nil, { type = "SkillType", skillType = SkillType.Channelled } ),
			div = 1000,
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportCastWhileChannellingTriggered"] = {
	name = "SupportCastWhileChannellingTriggered",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Spell, SkillType.Triggerable, SkillType.AND, },
	addSkillTypes = { SkillType.Triggered, },
	excludeSkillTypes = { SkillType.Totem, SkillType.TriggeredGrantedSkill, },
	statDescriptionScope = "gem_stat_descriptions",
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportCastWhileChannellingPlus"] = {
	name = "SupportCastWhileChannellingPlus",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Channelled, },
	addSkillTypes = { },
	excludeSkillTypes = { SkillType.Totem, },
	plusVersionOf = "SupportCastWhileChannelling",
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["cast_while_channelling_time_ms"] = {
			skill("triggerTime", nil, { type = "SkillType", skillType = SkillType.Channelled } ),
			div = 1000,
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportCastWhileChannellingTriggeredPlus"] = {
	name = "SupportCastWhileChannellingTriggeredPlus",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Spell, SkillType.Triggerable, SkillType.AND, },
	addSkillTypes = { SkillType.Triggered, },
	excludeSkillTypes = { SkillType.Totem, SkillType.TriggeredGrantedSkill, },
	plusVersionOf = "SupportCastWhileChannellingTriggered",
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_cast_while_channelling_triggered_skill_damage_+%_final"] = {
			mod("TriggeredDamage", "MORE", nil, 0, 0, { type = "SkillType", skillType = SkillType.Triggerable }),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportChanceToIgnite"] = {
	name = "SupportChanceToIgnite",
	hidden = true,
	color = 3,
	baseEffectiveness = 0,
	support = true,
	requireSkillTypes = { SkillType.Hit, SkillType.Attack, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_chance_to_ignite_fire_damage_+%_final"] = {
			mod("FireDamage", "MORE", nil),
		},
		["ignites_apply_fire_resistance_+"] = {
			mod("FireResist", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Debuff", effectName = "Combustion" }, { type = "Condition", var = "Ignited" }),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportChargedMines"] = {
	name = "SupportChargedMines",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Mine, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["mine_throwing_speed_+%_per_frenzy_charge"] = {
			mod("MineLayingSpeed", "INC", nil, 0, 0, { type = "Multiplier", var = "FrenzyCharge" }),
		},
		["mine_critical_strike_chance_+%_per_power_charge"] = {
			mod("CritChance", "INC", nil, 0, KeywordFlag.Mine, { type = "Multiplier", var = "PowerCharge" }),
		},
		["mine_projectile_speed_+%_per_frenzy_charge"] = {
			mod("ProjectileSpeed", "INC", nil, 0, 0, { type = "Multiplier", var = "FrenzyCharge" })
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportConcentratedEffect"] = {
	name = "SupportConcentratedEffect",
	hidden = true,
	color = 3,
	baseEffectiveness = 0,
	support = true,
	requireSkillTypes = { SkillType.Area, SkillType.CreateMinion, SkillType.Type53, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_concentrated_effect_skill_area_of_effect_+%_final"] = {
			mod("AreaOfEffect", "MORE", nil),
		},
		["support_area_concentrate_area_damage_+%_final"] = {
			mod("Damage", "MORE", nil, ModFlag.Area),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportControlledDestruction"] = {
	name = "SupportControlledDestruction",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Hit, SkillType.Attack, SkillType.Type59, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_controlled_destruction_spell_damage_+%_final"] = {
			mod("Damage", "MORE", nil, ModFlag.Spell),
		},
		["support_controlled_destruction_critical_strike_chance_+%_final"] = {
			mod("CritChance", "MORE", nil),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportControlledDestructionPlus"] = {
	name = "SupportControlledDestructionPlus",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Hit, SkillType.Attack, SkillType.Type59, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	plusVersionOf = "SupportControlledDestruction",
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_controlled_destruction_spell_damage_+%_final"] = {
			mod("Damage", "MORE", nil, ModFlag.Spell),
		},
		["support_controlled_destruction_critical_strike_chance_+%_final"] = {
			mod("CritChance", "MORE", nil),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportCurseOnHit"] = {
	name = "SupportCurseOnHit",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Attack, SkillType.Hit, },
	addSkillTypes = { },
	excludeSkillTypes = { SkillType.Trap, SkillType.Mine, SkillType.Totem, },
	ignoreMinionTypes = true,
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["damage_vs_cursed_enemies_per_enemy_curse_+%"] = {
			mod("Damage", "INC", nil, 0, 0, { type = "Multiplier", var = "CurseOnEnemy" })
		}
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportCurseOnHitCurse"] = {
	name = "SupportCurseOnHitCurse",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.AppliesCurse, SkillType.Hex, SkillType.AND, SkillType.Triggerable, SkillType.AND, },
	addSkillTypes = { SkillType.Triggered, },
	excludeSkillTypes = { SkillType.Trap, SkillType.Mine, SkillType.Totem, SkillType.AuraDebuff, SkillType.TriggeredGrantedSkill, },
	ignoreMinionTypes = true,
	statDescriptionScope = "gem_stat_descriptions",
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportCurseOnHitPlus"] = {
	name = "SupportCurseOnHitPlus",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Attack, SkillType.Hit, },
	addSkillTypes = { },
	excludeSkillTypes = { SkillType.Trap, SkillType.Mine, SkillType.Totem, },
	ignoreMinionTypes = true,
	plusVersionOf = "SupportCurseOnHit",
	statDescriptionScope = "gem_stat_descriptions",
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportCurseOnHitCursePlus"] = {
	name = "SupportCurseOnHitCursePlus",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.AppliesCurse, SkillType.Hex, SkillType.AND, SkillType.Triggerable, SkillType.AND, },
	addSkillTypes = { SkillType.Triggered, },
	excludeSkillTypes = { SkillType.Trap, SkillType.Mine, SkillType.Totem, SkillType.AuraDebuff, SkillType.TriggeredGrantedSkill, },
	ignoreMinionTypes = true,
	plusVersionOf = "SupportCurseOnHitCurse",
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["number_of_additional_curses_allowed"] = {
			mod("AdditionalCurse", "BASE", nil),
			flag("CanHaveAdditionalCurse"),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportMinionFocusFire"] = {
	name = "SupportMinionFocusFire",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.CreatesMinion, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["deathmark_minion_damage_+%_final"] = {
			mod("MinionModifier", "LIST", { mod = mod("Damage", "MORE", nil) }),
		},
		["support_minion_focus_fire_damage_+%_final_vs_focussed_target"] = {
			mod("MinionModifier", "LIST", { mod = mod("Damage", "MORE", nil) }, 0, 0, { type = "Condition", var = "EnemyHasDeathmark" }),
		},
		["support_minion_focus_fire_critical_strike_chance_+%_vs_focused_target"] = {
			mod("MinionModifier", "LIST", { mod = mod("CritChance", "INC", nil) }, 0, 0, { type = "Condition", var = "EnemyHasDeathmark" }),
		},
		["support_minion_focus_fire_critical_strike_multiplier_+_vs_focused_target"] = {
			mod("MinionModifier", "LIST", { mod = mod("CritMultiplier", "BASE", nil) }, 0, 0, { type = "Condition", var = "EnemyHasDeathmark" }),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["MinionFocusFire"] = {
	name = "Signal Prey",
	hidden = true,
	color = 3,
	description = "Applies a debuff to a specific enemy which signals your minions to consider that enemy to be the Prey. All minions from skills supported by any Predator Support will target that enemy. Only one enemy can be the Prey at a time. This skill cannot be used by Totems, Traps, or Mines.",
	skillTypes = { [SkillType.Spell] = true, [SkillType.Instant] = true, [SkillType.Minion] = true, [SkillType.Triggerable] = true, [SkillType.Duration] = true, [SkillType.Type92] = true, [SkillType.SecondWindSupport] = true, },
	statDescriptionScope = "debuff_skill_stat_descriptions",
	castTime = 0,
	baseFlags = {
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportDecay"] = {
	name = "SupportDecay",
	hidden = true,
	color = 3,
	baseEffectiveness = 1.335000038147,
	incrementalEffectiveness = 0.045800000429153,
	support = true,
	requireSkillTypes = { SkillType.Hit, SkillType.Attack, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportEfficacy"] = {
	name = "SupportEfficacy",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Hit, SkillType.Attack, SkillType.Type59, SkillType.Duration, SkillType.Type55, SkillType.DamageOverTime, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_efficacy_spell_damage_+%_final"] = {
			mod("Damage", "MORE", nil, ModFlag.Spell),
		},
		["support_efficacy_damage_over_time_+%_final"] = {
			mod("Damage", "MORE", nil, ModFlag.Dot),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportElementalFocus"] = {
	name = "SupportElementalFocus",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Hit, SkillType.Attack, SkillType.CausesBurning, SkillType.NonHitChill, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_gem_elemental_damage_+%_final"] = {
			mod("ElementalDamage", "MORE", nil),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportElementalFocusPlus"] = {
	name = "SupportElementalFocusPlus",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Hit, SkillType.Attack, SkillType.CausesBurning, SkillType.NonHitChill, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	plusVersionOf = "SupportElementalFocus",
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_gem_elemental_damage_+%_final"] = {
			mod("ElementalDamage", "MORE", nil),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportElementalProliferation"] = {
	name = "SupportElementalProliferation",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Hit, SkillType.Attack, SkillType.CauseElementalStatus, },
	addSkillTypes = { SkillType.Area, },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["damage_+%_vs_enemies_per_freeze_shock_ignite"] = {
			mod("Damage", "INC", nil, 0, 0, { type = "ActorCondition", actor = "enemy", var = "Ignited" }),
			mod("Damage", "INC", nil, 0, 0, { type = "ActorCondition", actor = "enemy", var = "Frozen" }),
			mod("Damage", "INC", nil, 0, 0, { type = "ActorCondition", actor = "enemy", var = "Shocked" }),
		}
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportEnergyShieldLeech"] = {
	name = "SupportEnergyShieldLeech",
	hidden = true,
	color = 3,
	baseEffectiveness = 0,
	support = true,
	requireSkillTypes = { SkillType.Hit, SkillType.Attack, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_energy_shield_leech_damage_+%_on_full_energy_shield_final"] = {
			mod("Damage", "MORE", nil, 0, 0, { type = "Condition", var = "FullEnergyShield" }),
		},
		["support_energy_shield_leech_damage_+%_while_leeching_energy_shield_final"] = {
			mod("Damage", "MORE", nil, 0, 0, { type = "Condition", var = "LeechingEnergyShield" }),
		},
		["maximum_energy_shield_leech_amount_per_leech_+%"] = {
			mod("MaxEnergyShieldLeechRate", "INC", nil)
		}
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportAdditionalXP"] = {
	name = "SupportAdditionalXP",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { },
	addSkillTypes = { },
	excludeSkillTypes = { },
	supportGemsOnly = true,
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["local_gem_int_requirement_+%"] = {
			mod("IntRequirement", "INC", nil)
		}
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportFasterCast"] = {
	name = "SupportFasterCast",
	hidden = true,
	color = 3,
	baseEffectiveness = 0,
	support = true,
	requireSkillTypes = { SkillType.Spell, },
	addSkillTypes = { },
	excludeSkillTypes = { SkillType.Instant, SkillType.Type116, },
	statDescriptionScope = "gem_stat_descriptions",
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportMinionOffensiveStance"] = {
	name = "SupportMinionOffensiveStance",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.CreatesMinion, },
	addSkillTypes = { SkillType.Duration, },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_minion_offensive_stance_minion_damage_+%_final_while_you_have_puppet_master"] = {
			mod("MinionModifier", "LIST", { mod = mod("Damage", "MORE", nil) }, 0, 0, { type = "Condition", var = "FeedingFrenzyActive" }),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportRemoteMine2"] = {
	name = "SupportRemoteMine2",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.SkillCanMine, },
	addSkillTypes = { SkillType.Mine, SkillType.ManaCostReserved, SkillType.Area, SkillType.Aura, SkillType.AuraDebuff, },
	excludeSkillTypes = { SkillType.TriggeredGrantedSkill, SkillType.ManaCostReserved, SkillType.ManaCostPercent, SkillType.NOT, SkillType.AND, SkillType.Mine, SkillType.NOT, SkillType.AND, },
	statDescriptionScope = "gem_stat_descriptions",
	addFlags = {
		mine = true,
	},
	statMap = {
		["support_remote_mine_2_damage_+%_final"] = {
			mod("Damage", "MORE", nil),
		},
		["support_remote_mine_2_chance_to_deal_double_damage_%_against_enemies_near_mines"] = {
			mod("SelfDoubleDamageChance", "BASE", nil, 0, 0, { type = "Limit", limit = 100 }, { type = "GlobalEffect", effectType = "AuraDebuff", effectName = "High-Impact Mine", effectStackVar = "ActiveMineCount" }),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportIgniteProliferation"] = {
	name = "SupportIgniteProliferation",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Hit, SkillType.Attack, },
	addSkillTypes = { SkillType.Area, },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_ignite_prolif_ignite_damage_+%_final"] = {
			mod("Damage", "MORE", nil, 0, KeywordFlag.Ignite),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportImmolation"] = {
	name = "SupportImmolation",
	hidden = true,
	color = 3,
	baseEffectiveness = 0.88889998197556,
	incrementalEffectiveness = 0.034000001847744,
	support = true,
	requireSkillTypes = { SkillType.Hit, SkillType.Attack, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["ViciousHexSupport"] = {
	name = "ViciousHexSupport",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Hex, SkillType.AppliesCurse, SkillType.AND, },
	addSkillTypes = { },
	excludeSkillTypes = { SkillType.Triggered, SkillType.TriggeredGrantedSkill, SkillType.Aura, },
	statDescriptionScope = "gem_stat_descriptions",
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["ViciousHexExplosion"] = {
	name = "Doom Blast",
	hidden = true,
	color = 3,
	baseEffectiveness = 1.2144999504089,
	incrementalEffectiveness = 0.045499999076128,
	description = "Deals chaos damage in an area based on the amount of Doom on the triggering Hex.",
	skillTypes = { [SkillType.Spell] = true, [SkillType.Area] = true, [SkillType.Hit] = true, [SkillType.Triggerable] = true, [SkillType.Triggered] = true, [SkillType.AreaSpell] = true, [SkillType.ChaosSkill] = true, [SkillType.SecondWindSupport] = true, [SkillType.TriggeredGrantedSkill] = true, },
	statDescriptionScope = "skill_stat_descriptions",
	castTime = 1,
	statMap = {
		["doom_blast_damage_+%_final_per_5_doom_on_hex"] = {
			mod("Damage", "MORE", nil, 0, 0, { type = "Multiplier", var = "HexDoom", div = 5 }),
		},
	},
	baseFlags = {
		spell = true,
		area = true,
	},
	baseMods = {
		skill("radius", 20),
		skill("showAverage", true),
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportIncreasedAreaOfEffect"] = {
	name = "SupportIncreasedAreaOfEffect",
	hidden = true,
	color = 3,
	baseEffectiveness = 0,
	support = true,
	requireSkillTypes = { SkillType.Area, SkillType.CreateMinion, SkillType.Type53, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportIncreasedAreaOfEffectPlus"] = {
	name = "SupportIncreasedAreaOfEffectPlus",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Area, SkillType.CreateMinion, SkillType.Type53, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	plusVersionOf = "SupportIncreasedAreaOfEffect",
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["inc_aoe_plus_more_area_damage_+%_final"] = {
			mod("Damage", "MORE", nil, ModFlag.Area),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportIncreasedCriticalDamage"] = {
	name = "SupportIncreasedCriticalDamage",
	hidden = true,
	color = 3,
	baseEffectiveness = 0,
	support = true,
	requireSkillTypes = { SkillType.Hit, SkillType.Attack, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportIncreasedCriticalStrikes"] = {
	name = "SupportIncreasedCriticalStrikes",
	hidden = true,
	color = 3,
	baseEffectiveness = 0,
	support = true,
	requireSkillTypes = { SkillType.Hit, SkillType.Attack, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportBurningMinions"] = {
	name = "SupportBurningMinions",
	hidden = true,
	color = 3,
	baseEffectiveness = 5.9082999229431,
	incrementalEffectiveness = 0.056499999016523,
	support = true,
	requireSkillTypes = { SkillType.CreatesMinion, },
	addSkillTypes = { SkillType.CausesBurning, },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["minion_fire_damage_%_of_maximum_life_taken_per_minute"] = {
			mod("MinionModifier", "LIST", { mod = mod("FireDegen", "BASE", nil, 0, 0, { type = "PerStat", stat = "Life" }, { type = "GlobalEffect", effectType = "Buff" }) }),
			div = 6000,
		},
		["support_minion_instability_minion_base_fire_area_damage_per_minute"] = {
			mod("MinionModifier", "LIST", { mod = mod("Multiplier:InfernalLegionBaseDamage", "BASE", nil) }),
			div = 60,
			mod("ExtraMinionSkill", "LIST", { skillId = "InfernalLegion" }),
		},
		["minion_burning_damage_+%"] = {
			mod("MinionModifier", "LIST", { mod = mod("FireDamage", "INC", nil, 0, KeywordFlag.FireDot) }),
		},
		["minion_fire_damage_taken_+%"] = {
			mod("MinionModifier", "LIST", { mod = mod("FireDamageTaken", "INC", nil) }),
		}
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportStormBarrier"] = {
	name = "SupportStormBarrier",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Channelled, },
	addSkillTypes = { SkillType.Duration, },
	excludeSkillTypes = { SkillType.Totem, },
	ignoreMinionTypes = true,
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_storm_barrier_skill_type_damage_taken_when_hit_+%_final"] = {
			mod("PhysicalDamageTakenWhenHit", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Infused Channelling", modCond = "PhysicalInfusion" }),
			mod("FireDamageTakenWhenHit", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Infused Channelling", modCond = "FireInfusion" }),
			mod("ColdDamageTakenWhenHit", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Infused Channelling", modCond = "ColdInfusion" }),
			mod("LightningDamageTakenWhenHit", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Infused Channelling", modCond = "LightningInfusion" }),
			mod("ChaosDamageTakenWhenHit", "MORE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Infused Channelling", modCond = "ChaosInfusion" }),
		},
		["support_storm_barrier_damage_+%_final"] = {
			mod("Damage", "MORE", nil),
		},
		["support_storm_barrier_skill_type_damage_+%_final"] = {
			mod("Condition:HavePhysicalInfusion", "FLAG", true, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Infusion", effectCond = "InfusionActive", modCond = "PhysicalInfusion" }),
			mod("Condition:HaveFireInfusion", "FLAG", true, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Infusion", effectCond = "InfusionActive", modCond = "FireInfusion" }),
			mod("Condition:HaveColdInfusion", "FLAG", true, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Infusion", effectCond = "InfusionActive", modCond = "ColdInfusion" }),
			mod("Condition:HaveLightningInfusion", "FLAG", true, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Infusion", effectCond = "InfusionActive", modCond = "LightningInfusion" }),
			mod("Condition:HaveChaosInfusion", "FLAG", true, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Infusion", effectCond = "InfusionActive", modCond = "ChaosInfusion" }),
		},
		["infusion_grants_life_regeneration_rate_per_minute_%"] = {
			mod("LifeRegenPercent", "BASE", true, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Infusion", effectCond = "InfusionActive", modCond = "PhysicalInfusion" }),
			mod("LifeRegenPercent", "BASE", true, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Infusion", effectCond = "InfusionActive", modCond = "FireInfusion" }),
			mod("LifeRegenPercent", "BASE", true, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Infusion", effectCond = "InfusionActive", modCond = "ColdInfusion" }),
			mod("LifeRegenPercent", "BASE", true, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Infusion", effectCond = "InfusionActive", modCond = "LightningInfusion" }),
			mod("LifeRegenPercent", "BASE", true, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Infusion", effectCond = "InfusionActive", modCond = "ChaosInfusion" }),
			div = 60
		},
		["infusion_effect_+%"] = {
			mod("InfusionEffect", "INC", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff" }),
		},
	},
	baseMods = {
		flag("Condition:PhysicalInfusion", { type = "SkillType", skillType = SkillType.PhysicalSkill }),
		flag("Condition:FireInfusion", { type = "SkillType", skillType = SkillType.FireSkill }),
		flag("Condition:ColdInfusion", { type = "SkillType", skillType = SkillType.ColdSkill }),
		flag("Condition:LightningInfusion", { type = "SkillType", skillType = SkillType.LightningSkill }),
		flag("Condition:ChaosInfusion", { type = "SkillType", skillType = SkillType.ChaosSkill }),
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportOnslaughtOnSlayingShockedEnemy"] = {
	name = "SupportOnslaughtOnSlayingShockedEnemy",
	hidden = true,
	color = 3,
	baseEffectiveness = 0.23749999701977,
	incrementalEffectiveness = 0.039000000804663,
	support = true,
	requireSkillTypes = { SkillType.Hit, SkillType.Attack, },
	addSkillTypes = { SkillType.Duration, },
	excludeSkillTypes = { SkillType.Trap, SkillType.Mine, SkillType.Totem, },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_innervate_minimum_added_lightning_damage"] = {
			mod("LightningMin", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Innervation", effectCond = "InnervationActive" }),
		},
		["support_innervate_maximum_added_lightning_damage"] = {
			mod("LightningMax", "BASE", nil, 0, 0, { type = "GlobalEffect", effectType = "Buff", effectName = "Innervation", effectCond = "InnervationActive" }),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportHandcastSpellBoost"] = {
	name = "SupportHandcastSpellBoost",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.AreaSpell, },
	addSkillTypes = { },
	excludeSkillTypes = { SkillType.Trap, SkillType.Mine, SkillType.Totem, SkillType.Channelled, SkillType.Instant, SkillType.ManaCostReserved, SkillType.AuraDebuff, SkillType.Triggered, SkillType.TriggeredGrantedSkill, SkillType.Vaal, SkillType.CreatesMinion, },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_spell_boost_area_damage_+%_final_per_charge"] = {
			mod("Damage", "MORE", nil, ModFlag.Area, 0, { type = "Multiplier", var = "Intensity", limitVar = "IntensityLimit" }),
		},
		["support_spell_boost_area_of_effect_+%_final_per_charge"] = {
			mod("AreaOfEffect", "MORE", nil, 0, 0, { type = "Multiplier", var = "Intensity", limitVar = "IntensityLimit" }),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportItemRarity"] = {
	name = "SupportItemRarity",
	hidden = true,
	color = 3,
	baseEffectiveness = 0,
	support = true,
	requireSkillTypes = { SkillType.Hit, SkillType.Attack, SkillType.DamageOverTime, SkillType.Type112, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportLightningPenetration"] = {
	name = "SupportLightningPenetration",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Hit, SkillType.Attack, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportLightningPenetrationPlus"] = {
	name = "SupportLightningPenetrationPlus",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Hit, SkillType.Attack, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	plusVersionOf = "SupportLightningPenetration",
	statDescriptionScope = "gem_stat_descriptions",
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportMinionDefensiveStance"] = {
	name = "SupportMinionDefensiveStance",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.CreatesMinion, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_minion_defensive_stance_minion_damage_taken_+%_final"] = {
			mod("MinionModifier", "LIST", { mod = mod("DamageTaken", "MORE", nil) }),
		},
		["support_minion_defensive_stance_minion_damage_+%_final_against_enemies_near_you"] = {
			mod("MinionModifier", "LIST", { mod = mod("Damage", "MORE", nil) }, 0, 0, { type = "Condition", var = "MeatShieldEnemyNearYou" }),
		},
		["minion_block_%"] = {
			mod("MinionModifier", "LIST", { mod = mod("BlockChance", "BASE", nil) }),
		}
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportMinefield"] = {
	name = "SupportMinefield",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Mine, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_minefield_mine_throwing_speed_+%_final"] = {
			mod("MineLayingSpeed", "MORE", nil),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportMinionDamage"] = {
	name = "SupportMinionDamage",
	hidden = true,
	color = 3,
	baseEffectiveness = 0,
	support = true,
	requireSkillTypes = { SkillType.CreatesMinion, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_minion_damage_+%_final"] = {
			mod("MinionModifier", "LIST", { mod = mod("Damage", "MORE", nil) }),
		},
		["minion_chance_to_deal_double_damage_%"] = {
			mod("MinionModifier", "LIST", { mod = mod("DoubleDamageChance", "BASE", nil) }),
		},
		["minion_ailment_damage_+%"] = {
			mod("MinionModifier", "LIST", { mod = mod("Damage", "INC", nil, 0, KeywordFlag.Ailment) }),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportMinionDamagePlus"] = {
	name = "SupportMinionDamagePlus",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.CreatesMinion, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	plusVersionOf = "SupportMinionDamage",
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_minion_damage_+%_final"] = {
			mod("MinionModifier", "LIST", { mod = mod("Damage", "MORE", nil) }),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportMinionLife"] = {
	name = "SupportMinionLife",
	hidden = true,
	color = 3,
	baseEffectiveness = 0,
	support = true,
	requireSkillTypes = { SkillType.CreatesMinion, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_minion_maximum_life_+%_final"] = {
			mod("MinionModifier", "LIST", { mod = mod("Life", "MORE", nil) }),
		},
		["minion_life_regeneration_rate_per_minute_%"] = {
			mod("MinionModifier", "LIST", { mod = mod("LifeRegenPercent", "BASE", nil) }),
			div = 60
		},
		["minion_damage_+%_on_full_life"] = {
			mod("MinionModifier", "LIST", { mod = mod("Damage", "INC", nil, 0, 0, {type = "Condition", var = "FullLife"}) }),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportMinionSpeed"] = {
	name = "SupportMinionSpeed",
	hidden = true,
	color = 3,
	baseEffectiveness = 0,
	support = true,
	requireSkillTypes = { SkillType.CreatesMinion, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportSummonElementalResistances"] = {
	name = "SupportSummonElementalResistances",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.CreatesMinion, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_minion_totem_resistance_elemental_damage_+%_final"] = {
			mod("MinionModifier", "LIST", { mod = mod("ElementalDamage", "MORE", nil) }),
		},
		["minion_life_leech_from_elemental_damage_permyriad"] = {
			mod("MinionModifier", "LIST", { mod = mod("FireDamageLeech", "BASE", nil) }),
			mod("MinionModifier", "LIST", { mod = mod("LightningDamageLeech", "BASE", nil) }),
			mod("MinionModifier", "LIST", { mod = mod("ColdDamageLeech", "BASE", nil) }),
			div = 100
		}
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportPhysicalToLightning"] = {
	name = "SupportPhysicalToLightning",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Hit, SkillType.Attack, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["enemies_you_shock_take_%_increased_physical_damage"] = {
			mod("PhysicalDamageTaken", "INC", nil, 0, 0, { type = "GlobalEffect", effectType = "Debuff" }, { type = "Condition", var = "Shocked" }),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportProjectileIntensity"] = {
	name = "SupportProjectileIntensity",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Projectile, SkillType.Spell, SkillType.AND, },
	addSkillTypes = { },
	excludeSkillTypes = { SkillType.Trap, SkillType.Mine, SkillType.Totem, SkillType.Channelled, SkillType.Instant, SkillType.ManaCostReserved, SkillType.AuraDebuff, SkillType.Triggered, SkillType.TriggeredGrantedSkill, SkillType.Vaal, SkillType.CreatesMinion, },
	ignoreMinionTypes = true,
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["additional_projectiles_per_intensity"] = {
			mod("ProjectileCount", "BASE", nil, 0, 0, { type = "Multiplier", var = "Intensity" , limitVar = "IntensityLimit" }),
		},
		["support_greater_projectile_intensity_projectile_damage_+%_final"] = {
			mod("Damage", "MORE", nil, ModFlag.Projectile),
		},
		["greater_projectile_intensity_projectile_damage_+%_final_per_intensity"] = {
			mod("Damage", "MORE", nil, ModFlag.Projectile, 0, { type = "Multiplier", var = "Intensity" , limitVar = "IntensityLimit" }),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportPowerChargeOnCrit"] = {
	name = "SupportPowerChargeOnCrit",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Hit, SkillType.Attack, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_power_charge_on_crit_damage_+%_final_per_power_charge"] = {
			mod("Damage", "MORE", nil, 0, 0, { type = "Multiplier", var = "PowerCharge" }),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportRemoteMine"] = {
	name = "SupportRemoteMine",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.SkillCanMine, },
	addSkillTypes = { SkillType.Mine, SkillType.ManaCostReserved, },
	excludeSkillTypes = { SkillType.TriggeredGrantedSkill, SkillType.ManaCostReserved, SkillType.ManaCostPercent, SkillType.NOT, SkillType.AND, SkillType.Mine, SkillType.NOT, SkillType.AND, },
	statDescriptionScope = "gem_stat_descriptions",
	addFlags = {
		mine = true,
	},
	statMap = {
		["base_skill_show_average_damage_instead_of_dps"] = {
			skill("showAverage", true, { type = "SkillType", skillType = SkillType.SkillCanMine }),
		},
		["support_gem_mine_damage_+%_final"] = {
			mod("Damage", "MORE", nil, 0, KeywordFlag.Mine),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportSpellCascade"] = {
	name = "SupportSpellCascade",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.SpellCanCascade, },
	addSkillTypes = { },
	excludeSkillTypes = { SkillType.Totem, SkillType.Trap, SkillType.Mine, SkillType.Aura, SkillType.Vaal, },
	ignoreMinionTypes = true,
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_spell_cascade_area_of_effect_+%_final"] = {
			mod("AreaOfEffect", "MORE", nil),
		},
		["support_spell_cascade_damage_+%_final"] = {
			mod("Damage", "MORE", nil),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportSpellCascadePlus"] = {
	name = "SupportSpellCascadePlus",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.SpellCanCascade, },
	addSkillTypes = { },
	excludeSkillTypes = { SkillType.Totem, SkillType.Trap, SkillType.Mine, SkillType.Aura, SkillType.Vaal, },
	ignoreMinionTypes = true,
	plusVersionOf = "SupportSpellCascade",
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_spell_cascade_area_of_effect_+%_final"] = {
			mod("AreaOfEffect", "MORE", nil),
		},
		["support_spell_cascade_damage_+%_final"] = {
			mod("Damage", "MORE", nil),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportMulticast"] = {
	name = "SupportMulticast",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.SpellCanRepeat, },
	addSkillTypes = { },
	excludeSkillTypes = { SkillType.Totem, SkillType.Trap, SkillType.Mine, SkillType.Triggered, SkillType.ManaCostReserved, SkillType.Vaal, SkillType.Instant, },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_echo_damage_+%_final"] = {
			mod("Damage", "MORE", nil),
		},
		["support_multicast_cast_speed_+%_final"] = {
			mod("Speed", "MORE", nil, ModFlag.Cast),
		},
		["support_spell_echo_final_repeat_damage_+%_final"] = {
			mod("Damage", "MORE", nil),
			--Average out over the casts
			div = 3
		}
	},
	baseMods = {
		flag("Condition:HaveSpellEcho"),
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportSpellEchoPlus"] = {
	name = "SupportSpellEchoPlus",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.SpellCanRepeat, },
	addSkillTypes = { },
	excludeSkillTypes = { SkillType.Totem, SkillType.Trap, SkillType.Mine, SkillType.Triggered, SkillType.ManaCostReserved, SkillType.Vaal, SkillType.Instant, SkillType.CreatesMirageWarrior, SkillType.CreatesMinion, SkillType.NOT, SkillType.AND, },
	plusVersionOf = "SupportMulticast",
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_echo_damage_+%_final"] = {
			mod("Damage", "MORE", nil),
		},
		["support_multicast_cast_speed_+%_final"] = {
			mod("Speed", "MORE", nil, ModFlag.Cast),
		},
		["spell_echo_plus_chance_double_damage_%_final"] = {
			mod("DoubleDamageChance", "BASE", nil, ModFlag.Spell, 0),
			div = 2,
		},
	},
	baseMods = {
		flag("Condition:HaveSpellEcho"),
		mod("DoubleDamageChance", "BASE", -3, ModFlag.Spell, 0, { type = "Condition", var = "HaveGreaterSpellEcho" }),
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportSummonGhostOnKill"] = {
	name = "SupportSummonGhostOnKill",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Attack, SkillType.Hit, SkillType.CreatesMinion, },
	addSkillTypes = { SkillType.CreatesMinion, SkillType.CreateMinion, },
	excludeSkillTypes = { SkillType.Type72, },
	statDescriptionScope = "gem_stat_descriptions",
	addFlags = {
		minion = true,
	},
	addMinionList = {
		"SummonedPhantasm"
	},
	statMap = {
		["base_number_of_support_ghosts_allowed"] = {
			mod("ActivePhantasmLimit", "BASE", nil),
		},
		["damage_+%_for_non_minions"] = {
			-- mod("Damage", "INC", nil, 0, 0, {type = "Actor"})
		},
		["phantasm_minimum_added_physical_damage_to_grant"] = {
			mod("PhysicalMin", "BASE", nil, ModFlag.Spell, 0, { type = "PerStat", stat = "ActivePhantasmLimit" }, { type = "GlobalEffect", effectType = "Buff", effectName = "Phantasmal Might", effectCond = "PhantasmalMight" })
		},
		["phantasm_maximum_added_physical_damage_to_grant"] = {
			mod("PhysicalMax", "BASE", nil, ModFlag.Spell, 0, { type = "PerStat", stat = "ActivePhantasmLimit" }, { type = "GlobalEffect", effectType = "Buff", effectName = "Phantasmal Might", effectCond = "PhantasmalMight" })
		}
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportRapidActivation"] = {
	name = "SupportRapidActivation",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Brand, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_rapid_activation_brand_activation_rate_+%_final"] = {
			mod("BrandActivationFrequency", "MORE", nil),
		},
		["support_rapid_activation_brand_skill_only_primary_duration_+%_final"] = {
			mod("PrimaryDuration", "MORE", nil, 0, KeywordFlag.Brand),
		},
		["support_rapid_activation_brand_skill_only_secondary_duration_+%_final"] = {
			mod("SecondaryDuration", "MORE", nil, 0, KeywordFlag.Brand),
		},
		["from_quality_brand_activation_rate_+%_final_if_75%_attached_duration_expired"] = {
			mod("BrandActivationFrequency", "MORE", nil, 0, 0, {type = "Condition", var = "BrandLastQuarter"})
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportTrinity"] = {
	name = "SupportTrinity",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Hit, SkillType.Attack, },
	addSkillTypes = { },
	excludeSkillTypes = { SkillType.Trap, SkillType.Mine, SkillType.Totem, SkillType.Instant, SkillType.ManaCostReserved, SkillType.Triggered, SkillType.TriggeredGrantedSkill, SkillType.Brand, SkillType.Orb, },
	ignoreMinionTypes = true,
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["elemental_damage_+%_final_per_5_lowest_resonance"] = {
			mod("ElementalDamage", "MORE", nil, 0, 0, { type = "Multiplier", var = "ResonanceCount", div = 5 }),
		},
		["damage_penetrates_%_elemental_resistances_while_all_resonance_is_25"] = {
			mod("ElementalPenetration", "BASE", nil, 0, 0, { type = "MultiplierThreshold", var = "ResonanceCount", threshold = 25 }),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportAilments"] = {
	name = "SupportAilments",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Hit, SkillType.Attack, SkillType.CauseElementalStatus, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_unbound_ailments_ailment_damage_+%_final"] = {
			mod("Damage", "MORE", nil, 0, bit.bor(KeywordFlag.Bleed, KeywordFlag.Poison, KeywordFlag.Ignite)),
		},
		["base_damage_+%_while_an_ailment_on_you"] = {
			mod("Damage", "INC", nil, 0, 0, {type = "Condition", varList = { "Frozen","Chilled","Shocked","Ignited","Scorched","Brittle","Sapped","Poisoned","Bleeding" }})
		}
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportUnboundAilmentsPlus"] = {
	name = "SupportUnboundAilmentsPlus",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.Hit, SkillType.Attack, SkillType.CauseElementalStatus, },
	addSkillTypes = { },
	excludeSkillTypes = { },
	plusVersionOf = "SupportAilments",
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_unbound_ailments_ailment_damage_+%_final"] = {
			mod("Damage", "MORE", nil, 0, bit.bor(KeywordFlag.Bleed, KeywordFlag.Poison, KeywordFlag.Ignite)),
		},
	},
	baseMods = {
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportHandcastAnticipation"] = {
	name = "SupportHandcastAnticipation",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.CanRapidFire, },
	addSkillTypes = { },
	excludeSkillTypes = { SkillType.Totem, SkillType.Trap, SkillType.Mine, SkillType.Triggered, SkillType.ManaCostReserved, SkillType.Vaal, SkillType.Instant, SkillType.Channelled, },
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_anticipation_rapid_fire_count"] = {
			mod("SealCount", "BASE", nil),
		},
		["support_anticipation_charge_gain_interval_ms"] = {
			mod("SealGainFrequency", "BASE", nil),
			div = 1000,
		},
		["support_spell_rapid_fire_repeat_use_damage_+%_final"] = {
			mod("SealRepeatPenalty", "MORE", nil),
		},
	},
	baseMods = {
		flag("HasSeals"),
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}
skills["SupportUnleashPlus"] = {
	name = "SupportUnleashPlus",
	hidden = true,
	color = 3,
	support = true,
	requireSkillTypes = { SkillType.CanRapidFire, },
	addSkillTypes = { },
	excludeSkillTypes = { SkillType.Totem, SkillType.Trap, SkillType.Mine, SkillType.Triggered, SkillType.ManaCostReserved, SkillType.Vaal, SkillType.Instant, SkillType.Channelled, },
	plusVersionOf = "SupportHandcastAnticipation",
	statDescriptionScope = "gem_stat_descriptions",
	statMap = {
		["support_anticipation_rapid_fire_count"] = {
			mod("SealCount", "BASE", nil),
		},
		["support_anticipation_charge_gain_interval_ms"] = {
			mod("SealGainFrequency", "BASE", nil),
			div = 1000,
		},
		["support_spell_rapid_fire_repeat_use_damage_+%_final"] = {
			mod("SealRepeatPenalty", "MORE", nil),
		},
	},
	baseMods = {
		flag("HasSeals"),
	},
	qualityStats = {
	},
	stats = {
	},
	levels = {
	},
}